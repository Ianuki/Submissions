local DigitalCameraController = {}

local CAS = game:GetService("ContextActionService")
local UIS = game:GetService("UserInputService")
local TS = game:GetService("TweenService")
local RS = game:GetService("RunService")
local Lighting = game.Lighting

local pCamera = workspace.CurrentCamera
local Player = game.Players.LocalPlayer
local CameraGUI = Player.PlayerGui:WaitForChild("Camera")
local Sounds = script.Sounds

DigitalCameraController["Max Zoom"] = 20
DigitalCameraController["Default_Field_Of_View"] = pCamera.FieldOfView
DigitalCameraController["State"] = false

local Zoom_Connection
local Zoom_Update_Connection

local NV = false

local Zoom_Indicator = CameraGUI.BG.CameraOverlay.Zoom.Indicator
local Start_Position = Zoom_Indicator.Position
local Final_Position = UDim2.new(Start_Position.X.Scale + 1 - Zoom_Indicator.Size.X.Scale, Start_Position.X.Offset, Start_Position.Y)

local Speed = 10
local Ease = 0.2

local Target = DigitalCameraController["Default_Field_Of_View"]

task.spawn(function()
	while true do
		CameraGUI.BG.CameraOverlay.BlinkingDot.Visible = false
		task.wait(1)
		CameraGUI.BG.CameraOverlay.BlinkingDot.Visible = true
		task.wait(1)
	end
end)

local Default_Ambient = Lighting.Ambient
local Default_OutdoorAmbient = Lighting.OutdoorAmbient
local Default_Density = Lighting.Atmosphere.Density
local Default_Exposure = Lighting.ExposureCompensation

local Bloom = script.Effects.Bloom
local ColorCorrection = script.Effects.ColorCorrection

local function On()
	ColorCorrection.Brightness = -1
	ColorCorrection.Contrast = -1
	
	TS:Create(ColorCorrection, TweenInfo.new(1, Enum.EasingStyle.Circular, Enum.EasingDirection.Out), {Brightness = 0, Contrast = 0}):Play()
	
	Default_Ambient = Lighting.Ambient
	Default_OutdoorAmbient = Lighting.OutdoorAmbient
	Default_Density = Lighting.Atmosphere.Density
	Default_Exposure = Lighting.ExposureCompensation
	
	Lighting.Ambient = Color3.fromRGB(170, 170, 170)
	Lighting.OutdoorAmbient = Color3.fromRGB(197, 197, 197)
	Lighting.Atmosphere.Density = 1
	Lighting.ExposureCompensation = 2
	
	ColorCorrection.Parent = Lighting
	Bloom.Parent = Lighting
	script.Sounds.NV:Play()
end

local function Off()
	Lighting.Ambient = Default_Ambient
	Lighting.OutdoorAmbient = Default_OutdoorAmbient
	Lighting.Atmosphere.Density = Default_Density
	Lighting.ExposureCompensation = Default_Exposure
	
	ColorCorrection.Parent = script.Effects
	Bloom.Parent = script.Effects
end

local function Toggle_Night_Vision(_, InputState)
	if InputState == Enum.UserInputState.End then
		if NV then
			Off()
		else
			On()
		end

		NV = not NV
	end
end

local Start_Time = 0

function DigitalCameraController.start()
	if DigitalCameraController["State"] then return end
	
	if Start_Time == 0 then
		Start_Time = tick()
		
		task.spawn(function()
			while task.wait() do
				local Total_Secs = math.floor(tick() - Start_Time)
				
				local Minutes = math.floor(Total_Secs / 60)
				local Seconds = Total_Secs - Minutes * 60
				
				Seconds = (Seconds > 9 and Seconds) or ("0" .. Seconds)
				Minutes = (Minutes > 9 and Minutes) or ("0" .. Minutes)
				
				CameraGUI.BG.CameraOverlay.Timer.Text = Minutes .. ":" .. Seconds
			end
		end)
	end
		
	DigitalCameraController["State"] = true
	Player.CameraMode = Enum.CameraMode.LockFirstPerson
	CameraGUI.BG.Visible = true	
	Sounds.Equipped:Play()
	
	--[[ Night Vision ]]
	
	CAS:BindAction("NV", Toggle_Night_Vision, false, Enum.KeyCode.N)
	
	--[[ Zoom ]]
	
	if Zoom_Connection then Zoom_Connection:Disconnect() end
	
	Zoom_Connection = UIS.InputChanged:Connect(function(Input)
		if not DigitalCameraController["State"] then Zoom_Connection:Disconnect() end	

		if Input.UserInputType == Enum.UserInputType.MouseWheel then
			local v = Input.Position.Z > 0 and 1 or -1
			
			if Target > DigitalCameraController["Max Zoom"] and Target < DigitalCameraController["Default_Field_Of_View"] then
				Sounds.Zoom:Play()
			end
			
			Target += v * Speed
			
			if Target > DigitalCameraController["Max Zoom"] and Target < DigitalCameraController["Default_Field_Of_View"] then
				Sounds.Zoom:Play()
			end
		end
	end)
	
	if Zoom_Update_Connection then Zoom_Update_Connection:Disconnect() end
	
	Zoom_Update_Connection = RS.RenderStepped:Connect(function()
		if not DigitalCameraController["State"] then Zoom_Update_Connection:Disconnect() end
		
		Target = Target > DigitalCameraController["Max Zoom"] and Target or DigitalCameraController["Max Zoom"]
		Target = Target < DigitalCameraController["Default_Field_Of_View"] and Target or DigitalCameraController["Default_Field_Of_View"]

		pCamera.FieldOfView += (Target - pCamera.FieldOfView) * Ease

		local Indicator_Target = (pCamera.FieldOfView - DigitalCameraController["Max Zoom"]) / (DigitalCameraController["Default_Field_Of_View"] - DigitalCameraController["Max Zoom"])
		Zoom_Indicator.Position = UDim2.new((1 - Indicator_Target) * Final_Position.X.Scale, Zoom_Indicator.Position.Y)
	end)
end

function DigitalCameraController.stop()
	if not DigitalCameraController["State"] then return end
	
	Player.CameraMode = Enum.CameraMode.Classic
	Sounds.Equipped:Play()
	DigitalCameraController["State"] = false
	CameraGUI.BG.Visible = false
	pCamera.FieldOfView = DigitalCameraController["Default_Field_Of_View"]
	Target = DigitalCameraController["Default_Field_Of_View"]
	
	CAS:UnbindAction("NV")
	Off()
	
	if Zoom_Update_Connection then Zoom_Update_Connection:Disconnect() end
	if Zoom_Connection then Zoom_Connection:Disconnect() end
end

return DigitalCameraController
